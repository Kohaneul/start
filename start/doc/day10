# day10

접근지정자
====>  그 내용을 어디까지 사용할 수 있는지 지정하는 예약된 용어
	   우리가 클래스를 제작한다고 해서
	   그 클래스(내용) 모든 사람에게 공개되는 것은 아니다.
	   클래스를 제작하는 사람이 사용범위를 지정할 수 있다.
	   
	   예 ] 
	   		class 는 누구까지 이 클래스를 사용하도록 할 것인가?
	   		new를 시킬 수 있도록 할 것인가?
	   		
	   		함수는 어디까지 이 함수를 호출할 수 있도록 할 것인가??
	   		
	   		
	   종류 ] 
	   		1. public
	   			===> 모든 곳에서 사용할 수 있다.
	   		2. protected
	   			===> 상속받은 하위 클래스 + 같은 패키지 소속의 클래스에서만 사용 가능
	   		3. 생략된 경우	
	   			===> 같은 패키지 소속의 클래스들 까지만 사용 가능
			4.private
				===> 다른 클래스에서는 절대 사용할 수 없다.
					 오직 자기 자신의 클래스 내에서만 사용할 수 있다.
		참고 ] 
			클래스는 지정할 수 있는 접근지정자가 
			public과 생략만 가능하다.
						
--------------------------------------------------------------------------------------------------------	
객체지향 언어의 특징
	1. 상속 : 다른클래스를 물려받아서 내 클래스에 사용 가능
	2. 다형성
	3. 은닉화 / 캡술화
--------------------------------------------------------------------------------------------------------

***
은닉화
	프로그램에 있어서 가장 중요한 요소는 데이터이다.
	즉, 변수가 프로그램에서 핵심적인 요소가 된다.
	무결성(결함이 없는 성질) 데이터를 유지할 수 있는 것이 가장 중요한 개념이 된다.
	
	은닉화란?
	이처럼 중요한 요소인 변수를 일반사용자들이 함부로 변경하지 못하도록
	(결점이 있는 데이터가 들어오지 못하도록 하는 것)
	방지하는 기법을 은닉화 라고 한다.
	
	방법 ] 
		1. 중요한 데이터가 기억될 변수의 접근지정자를 private으로 지정한다.
			==> 그 변수는 다른 사용자가 사용할 수 없게 된다.
		2. 대신 변수의 데이터를 변경하거나 값을 꺼내올 수 있도록 방법(함수)을 만들어 놓는다.
	
	
	예) 생일을 입력하세요
		  형식은 2002년 03월 08일
		  의 형식으로 입력하세요
		  
		 ====> 
		 사용자입력 ] 
		 	 22/03/08
		 	 
		 	 이렇게 입력이 되면 생일데이터에 결함이 생기게 된다.
		 	 
		 	 
===============================================================================

생성자[함수](Constructor)
===> 클래스를 사용하기 위해서는 new 시키는 순간에 자동실행되는 함수		
     new 명령과 함께 호출해줘야 하는 함수
     
     즉, 클래스를 new 한다는 것은 
     오브젝트로 만들어서 실행한다는 것
     따라서 이때 실행한다는 개념은 결국 Object를 만드는 순간에 뭔가를 실행하겠다는 개념이다.
     이 말은 물건을 만들때 필요한 뭔가 조치를 한다는 개념이다.
     
     결론적으로 물건을 실제로 만들기 위한 함수....
     
     클래스는 한가지 목적을 달성하기 위해서 만들어지는 프로램의 기본단위이다.
     이 안에는 그 목적을 달성하기 위한 변수, 함수로 구성된다.
     하지만 그 목적을 달성하기 위해서 가장 기본적으로 무언가 조치가 필요한 경우도 있다.
     
     예) 
     	String
     		==> 문자열을 관리하기 위한 목적으로 만들어진 클래스
     			문자열을 기억하고 있어야 한다.
     			
     	FileOutPutStream
     		==> 파일의 내용을 기록하기 위한 목적으로 만들어진 클래스
     			파일을 사용할 수 있도록 열어놔야 한다.
     			
     	Socket
     		==> 네트워크를 구성하기 위한 목적으로 만들어진 클래스
     			상대방과 접속을 이루어져 있어야 한다.
     	
     프로그램은 프로그램답게 뭔가를 조치하기 위해서는 함수가 필요하고
     위의 예를 비춰보면 각각의 클래스는오브젝트(객체)로 만들어지는 순간
     그 클래스만의 최소한의 일은 할 필요가 있더라..
     
     바로 이런 일을 하기 위해 만들어놓은 함수를 
     	"생성자 함수"(Constructor)"이라고 부른다.
     	
     우리가 생성자 함수를 만드는 이유는 
     만들고자 하는 클래스의 목적에 따라서 
     그 클래스가 해야할 가장 기본적인 일을 처리하기 위해서 만드는 것이다.
     
     생성자 함수를 만드는 방법] 
    	 규칙 ]
    	 	1. 함수의 이름은 반드시 클래스 이름과 동일하게 작성해야 한다.
    	 	2. 반환값은 절대로 가지면 안된다.(==>있는걸 셋팅하는 역할) void 라고 기술해도 안됨. 
    	 	3. 매개변수는 가질 수 있다.
    	 		예 ] 
    	 			String str = new String("나는 문자열");
    	 			String str2 = new String();
    	 		
    	 		예 ] 
    	 			class Test{
    	 				public Test(){
    	 					이 안에 클래스가 객체가 되는 순간 해야할 기본적인 내용을 기술하면 된다.
    	 				}	//매개변수가 없는 생성자를 기본 생성자 라고 부른다.
    	 				
    	 				*****
    	 				만약에 클래스를 제작하면서 생성자를 만들지 않으면
    	 				매개변수가 없고 함수 블럭의 내용이 없는 기본 생성자를 JVM이 만들어서 호출해준다.
    	 				만약, 생성자를 한개라도 만들면, 
    	 				JVM이 기본생성자를 만들지 않는다. 
    	 				따라서 되도록이면 기본생성자는 내용이 없더라도 반드시 기술해주는 것이 좋다.
    	 				
    	 				
    	 				
    	 				
    	 				public Test(int a){}
    	 				// int a, int b ==> int b, int a ====> 이렇게 매개변수가 정의가 되면 형태가 같은 것으로 본다.
    	 				
    	 				public Test(String name){}
    	 				
    	 			}
    	 			이 클래스를 객체로 만들때는
    	 			new Test();			====> (O)
    	 			new Test(10);		====> (O)
    	 			new Test("제니");	====> (O)
    	 			
    	 				
    	 			
    	 				
     
     
     
     
	
	
	
	
	
	
	
	
	